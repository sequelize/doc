To get the ball rollin' you first have to create an instance of Sequelize. Use it the following way:

<pre><%- koala(".js", "var sequelize = new Sequelize('database', 'username'[, 'password'])") %></pre>

This will save the passed database credentials and provide all further methods. Furthermore you can specify
a non-default host or port and some options:

<a name="sequelize-options" data-title="options"></a>
<pre><%- koala(".js", partial("code/usage/options.ejs")) %></pre>

To define mappings between a class and a table, use the define method (Stop telling me that JavaScript don't know classes. Call it however you want to!):

<a name="basic-mapping"></a>
<pre><%- koala(".js", partial("code/usage/basic-mapping.ejs")) %></pre>

Sequelize currently supports the following datatypes:
<a name="data-types"></a>
<pre><%= partial("code/usage/data-types.ejs") %></pre>

<a name="advanced-data-types"></a>
You can also set some options:
<pre><%- koala(".js", partial("code/usage/advanced-data-types.ejs")) %></pre>

<a name="validations"></a>
In v1.3.0 model validations have been added. They allow you to specify
format/content/inheritance validations for each attribute of the model.
You can perform the validation by calling the validate() method on an
instance before saving.
<pre><%- koala(".js", partial("code/usage/validations.ejs")) %></pre>

<a name="mapping-options"></a>
You can also take influence of the way, Sequelize handles your column names:
<pre><%- koala(".js", partial("code/usage/mapping-options.ejs")) %></pre>

You can also store your model definitions in a single file using the import method:
<a name="import"></a>
<pre><%- koala(".js", partial("code/usage/import.ejs")) %></pre>

The returned object is exactly the same as defined in the imported file's function.

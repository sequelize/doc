section#instances
  .subnav
    ul.nav.nav-pills
      li
        a(href='#instances-build') Build
      li
        a(href='#instances-create') Create
      li
        a(href='#instances-update-save') Update/Save
      li
        a(href='#instances-destroy') Destroy
      li
        a(href='#instances-configuration') Configuration
      li
        a(href="#instances-values") Values

  section#instances-build
    h3 Building an instance

    p
      | In order to create instances of defined classes just do as follows.
      | You might recognize the syntax if you coded Ruby in the past.
      | Using the <code>build</code>-method will return an unsaved object, which you explicitly have to save.

    pre.prettyprint.linenums
      | var project = Project.build({
      |   title: 'my awesome project',
      |   description: 'woot woot. this will make me a rich man'
      | })
      | &nbsp;
      | var task = Task.build({
      |   title: 'specify the project idea',
      |   description: 'bla',
      |   deadline: new Date()
      | })

    p Built instances will automatically get default values when they were defined:

    pre.prettyprint.linenums
      | // first define the model
      | var Task = sequelize.define('Project', {
      |   title: Sequelize.STRING,
      |   rating: { type: Sequelize.STRING, defaultValue: 3 }
      | })
      | &nbsp;
      | // now instantiate an object
      | var task = Task.build({title: 'very important task'})
      | &nbsp;
      | task.title // ==> 'very important task'
      | task.rating // ==> 3

    p To get it stored in the database, use the <code>save</code>-method and catch the events â€¦ if needed:

    pre.prettyprint.linenums
      | project.save().success(function() {
      |   // my nice callback stuff
      | })
      | &nbsp;
      | task.save().error(function(error) {
      |   // mhhh, wth!
      | })
      | &nbsp;
      | // you can also build, save and access the object with chaining:
      | Task
      |   .build({ title: 'foo', description: 'bar', deadline: new Date() })
      |   .save()
      |   .success(function(anotherTask) {
      |     // you can now access the currently saved task with the variable anotherTask... nice!
      |   }).error(function(error) {
      |     // Ooops, do some error-handling
      |   })

  section#instances-create
    h3 Creating an instance

    p Besides constructing objects, that needs an explicit save call to get stored in the database, there is also the possibility to do all those steps with one single command. It's called <code>create</code>.

    pre.prettyprint.linenums
      | Task.create({ title: 'foo', description: 'bar', deadline: new Date() }).success(function(task) {
      |   // you can now access the newly created task via the variable task
      | })

    p.v1-5-0
      | Sequelize <code>v1.5.0</code> introduced the possibility to define
      | attributes which can be set via the create method. This can be especially
      | very handy if you create database entries based on a form which can be
      | filled by a user. Using that would for example allow you to restrict the
      | <code>User</code> model to set a username and an address but not an
      | admin flag:

    pre.prettyprint.linenums
      | User.create({ username: 'barfooz', isAdmin: true }, [ 'username' ]).success(function(user) {
      |   // let's assume the default of isAdmin is false:
      |   console.log(user.values) // => { username: 'barfooz', isAdmin: false }
      | })

  section#instances-update-save
    h3 Updating / Saving an instance

    p Now lets change some values and save changes to the database... There are two ways to do that:

    pre.prettyprint.linenums
      | // way 1
      | task.title = 'a very different title now'
      | task.save().success(function() {})
      | &nbsp;
      | // way 2
      | task.updateAttributes({
      |   title: 'a very different title now'
      | }).success(function() {})

    p.v1-4-1 With v1.4.1 it's also possible to define which attributes should be saved when calling <code>save</code>. This is useful when you set attributes based on a previously defined object. E.g. if you get the values of an object via a form of a web app. Furthermore this is used internally for <code>updateAttributes</code>. This is how it looks like:

    pre.prettyprint.linenums
      | task.title = 'foooo'
      | task.description = 'baaaaaar'
      | task.save(['title']).success(function() {
      |  // title will now be 'foooo' but description is the very same as before
      | })

  section#instances-destroy
    h3 Destroying/deleting instances

    p
      | Once you created an object and got a reference to it, you can delete it
      | from the database. The relevant method is <code>destroy</code>:

    pre.prettyprint.linenums
      | Task.create({ title: 'a task' }).success(function(task) {
      |   // now you see me...
      |   task.destroy().success(function() {
      |     // now i'm gone :)
      |   })
      | })

  section#instances-configuration
    h3 Configuration

    p In order to define the encoding of a table you can do this:

    pre.prettyprint.linenums
      | // charset only
      | var Person = sequelize.define('Person', { /* attributes */ }, {
      |   charset: 'latin1'
      | })
      | &nbsp;
      | // charset + collate; this is still experimental
      | var Person = sequelize.define('Person', { /* attributes */ }, {
      |   charset: 'utf8',
      |   collate: 'utf8_general_ci'
      | })
      | &nbsp;
      | // or of course global
      | var sequelize = new Sequelize(db, user, pw, {
      |   define: { charset: 'latin1' }
      | })

    p You can also change the database engine, e.g. to MyISAM. InnoDB is default since v1.2.1 of Sequelize.

    pre.prettyprint.linenums
      | // charset only
      | var Person = sequelize.define('Person', { /* attributes */ }, {
      |   engine: 'MYISAM'
      | })
      | &nbsp;
      | // or of course global
      | var sequelize = new Sequelize(db, user, pw, {
      |   define: { engine: 'MYISAM' }
      | })

  section#instances-values.v1-4-0
    h3 Values of an instance

    p
      | If you log an instance you will notice, that there is a lot of additional stuff. In order
      | to hide such stuff and reduce it to the very interesting information, you can use the
      | <code>values</code>-attribute. Calling it will return only the values of an instance.

    pre.prettyprint.linenums
      | Person.create({
      |   name: 'Rambow',
      |   firstname: 'John'
      | }).success(function(john) {
      |   console.log(john.values)
      | })
      | &nbsp;
      | // result:
      | &nbsp;
      | // { name: 'Rambow',
      | //   firstname: 'John',
      | //   id: 1,
      | //   createdAt: Tue, 01 May 2012 19:12:16 GMT,
      | //   updatedAt: Tue, 01 May 2012 19:12:16 GMT
      | // }

    p
      | You can also transform an instance into JSON by using
      | <code>JSON.stringify(instance)</code>. This will basically return the
      | very same as <code>values</code>.


section#usage
  .subnav
    ul.nav.nav-pills
      li
        a(href='#usage-basics') Basic usage
      li
        a(href='#usage-options') Options
      li
        a(href='#usage-dialects') Dialects

  section#usage-basics
    p To get the ball rollin' you first have to create an instance of Sequelize. Use it the following way:

    pre.prettyprint.linenums
      | var sequelize = new Sequelize('database', 'username'[, 'password'])

  section#usage-options.v1-4-0.v1-5-0
    p This will save the passed database credentials and provide all further methods. Furthermore you can specify a non-default host or port and some options:

    pre.prettyprint.linenums
      | var sequelize = new Sequelize('database', 'username', 'password', {
      |   host: "my.server.tld",
      |   port: 12345
      | })
    
    pre.prettyprint.linenums
      | // No need for password?
      | var sequelize = new Sequelize('database', 'username')
      | // or
      | var sequelize = new Sequelize('database', 'username', null)

    pre.prettyprint.linenums
      | // All options at once:
      | var sequelize = new Sequelize('database', 'username', 'password', {
      |   // custom host; default: localhost
      |   host: 'my.server.tld',
      | &nbsp;
      |   // custom port; default: 3306
      |   port: 12345,
      | &nbsp;
      |   // custom protocol
      |   // - default: 'tcp'
      |   // - added in: v1.5.0
      |   // - postgres only, useful for heroku
      |   protocol: null,
      | &nbsp;
      |   // disable logging; default: console.log
      |   logging: false,
      | &nbsp;
      |   // max concurrent database requests; default: 50
      |   maxConcurrentQueries: 100,
      | &nbsp;
      |   // the sql dialect of the database
      |   // - default is 'mysql'
      |   // - currently supported: 'mysql', 'sqlite', 'postgres'
      |   dialect: 'mysql',
      | &nbsp;
      |   // the storage engine for sqlite
      |   // - default ':memory:'
      |   storage: 'path/to/database.sqlite',
      | &nbsp;
      |   // disable inserting undefined values as NULL
      |   // - default: false
      |   omitNull: true,
      | &nbsp;
      |   // Specify options, which are used when sequelize.define is called.
      |   // The following example:
      |   //   define: {timestamps: false}
      |   // is basically the same as:
      |   //   sequelize.define(name, attributes, { timestamps: false })
      |   // so defining the timestamps for each model will be not necessary
      |   // Below you can see the possible keys for settings. All of them are explained on this page
      |   define: {
      |     underscored: false
      |     freezeTableName: false,
      |     syncOnAssociation: true,
      |     charset: 'utf8',
      |     collate: 'utf8_general_ci',
      |     classMethods: {method1: function() {}},
      |     instanceMethods: {method2: function() {}},
      |     timestamps: true
      |   },
      | &nbsp;
      |   // similiar for sync: you can define this to always force sync for models
      |   sync: { force: true }
      | &nbsp;
      |   // sync after each association (see below). If set to false, you need to sync manually after setting all associations. Default: true
      |   syncOnAssociation: true
      | &nbsp;
      |   // use pooling in order to reduce db connection overload and to increase speed
      |   // currently only for mysql and postgresql (since v1.5.0)
      |   pool: { maxConnections: 5, maxIdleTime: 30}
      | })

    p.v1-4-0
      | You can also define a custom function for the logging part. Just pass a function.
      | The first parameter will be the string that is logged.

  section#usage-dialects.v1-4-0
    h3 SQL dialects
    p
      | The default dialect of Sequelize is <code>mysql</code>, but with version 1.3.0 the support
      | for non-mysql dialects was implemented. For non-mysql dialects, the dependency of the used
      | library needs to be specified in the <code>package.json</code> of your application. Below
      | you can see the required libraries and how to add them.

    h4 SQLite
    p
      | When defining the dialect as <code>sqlite</code> you'll be able to access SQLite databases.
      | As described above you need to specifically install the SQLite library <code>node-sqlite3</code>.
      | In order to do this, just change the dependencies in your <code>package.json</code>:
    pre.prettyprint.linenums
      | {
      |   "name": "my project",
      |   // ...
      |   "dependencies": {
      |     // Note: The ">="-operator is used for compatibility to Node 0.4 - 0.6
      |     "sqlite3": ">=2.0.0",
      |     "sequelize": "1.3.x",
      |     // ...
      |   }
      |   // ...
      | }
    p Now you need to specify the options <code>dialect</code> and <code>storage</code> in your instantiation:
    pre.prettyprint.linenums
      | var sequelize = new Sequelize('database', 'username', 'password', {
      |   // the sql dialect of the database
      |   dialect: 'sqlite',
      | &nbsp;
      |   // the storage engine for sqlite
      |   // - default ':memory:'
      |   storage: 'path/to/database.sqlite'
      |   // Of course all other options can be specified as well
      | })
    p That's it. Besides some strangeness in SQLite you won't notice any differences while using it with sequelize.

    h4.v1-4-0 PostgreSQL
    p
      | When defining the dialect as <code>postgres</code> you'll be able to access PostgreSQL databases.
      | As described above you need to specifically install the PostgreSQL library <code>pg</code>.
      | In order to do this, just change the dependencies in your <code>package.json</code>:
    pre.prettyprint.linenums
      | {
      |   "name": "my project",
      |   // ...
      |   "dependencies": {
      |     // ...
      |     "pg": "0.6.x",
      |     "sequelize": "1.4.x",
      |     // ...
      |   }
      |   // ...
      | }
    p Now you need to specify the option <code>dialect</code> in your instantiation:
    pre.prettyprint.linenums
      | var sequelize = new Sequelize('database', 'username', 'password', {
      |   // the sql dialect of the database
      |   dialect: 'postgres'
      |   // Of course all other options can be specified as well
      | })
    p That's it. You won't notice any differences while using it with sequelize.

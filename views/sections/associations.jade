section#associations
  .subnav
    ul.nav.nav-pills
      li
        a(href='#associations-one-to-one') One-To-One
      li
        a(href='#associations-one-to-many') One-To-Many
      li
        a(href='#associations-many-to-many') Many-To-Many
      li
        a(href='#associations-associate-objects') Associate objects
      li
        a(href='#associations-check-associations') Check associations

  p
    | With Sequelize you can also specify associations between multiple classes.
    | Doing so will help you to easily access and set those associated objects.
    | The library therefore provides for each defined class different methods,
    | which are explained in the following chapters.
    | <code>NOTE</code>: Associations with models that use custom primaryKeys
    | (so not the field 'id') are currently unsupported.

  section#associations-one-to-one
    h3 One-To-One associations
    p
      | One-To-One associations are connecting one source with exactly one target.
      | In order to define a proper database schema, Sequelize utilizes the methods
      | <code>belongsTo</code> and <code>hasOne</code>. You can use them as follows:

    pre.prettyprint.linenums
      | var User = sequelize.define('User', {/* ... */})
      | var Project = sequelize.define('Project', {/* ... */})
      | &nbsp;
      | // One-way associations
      | Project.hasOne(User)
      | &nbsp;
      | /*
      |   In this example hasOne will add an attribute ProjectId to the User model!
      |   Furthermore, Project.prototype will gain the methods getUser and setUser according
      |   to the first parameter passed to define. If you have underscore style
      |   enabled, the added attribute will be project_id instead of ProjectId.
      | &nbsp;
      |   You can also define the foreign key, e.g. if you already have an existing
      |   database and want to work on it:
      | */
      | &nbsp;
      | Project.hasOne(User, { foreignKey: 'initiator_id' })
      | &nbsp;
      | /*
      |   Because Sequelize will use the model's name (first parameter of define) for
      |   the accessor methods, it is also possible to pass a special option to hasOne:
      | */
      | &nbsp;
      | Project.hasOne(User, { as: 'Initiator' })
      | // Now you will get Project#getInitiator and Project#setInitiator
      | &nbsp;
      | // Or let's define some self references
      | var Person = sequelize.define('Person', { /* ... */})
      | &nbsp;
      | Person.hasOne(Person, {as: 'Father'})
      | // this will add the attribute FatherId to Person
      | &nbsp;
      | // also possible:
      | Person.hasOne(Person, {as: 'Father', foreignKey: 'DadId'})
      | // this will add the attribute DadId to Person
      | &nbsp;
      | // In both cases you will be able to do:
      | Person#setFather
      | Person#getFather
      | &nbsp;
      | // Since v1.3.0 you can also chain associations:
      | Project
      |   .hasOne(User)
      |   .hasOne(Deadline)
      |   .hasOne(Attachment)

    p To get the association working the other way around (so from User to Project), it's necessary to do this:

    pre.prettyprint.linenums
      | var User = sequelize.define('User', {/* ... */})
      | var Project = sequelize.define('Project', {/* ... */})
      | &nbsp;
      | // One-way back associations
      | Project.belongsTo(User)
      | &nbsp;
      | /*
      |   In this example belongsTo will add an attribute UserId to the Project model!
      |   That's the only difference to hasMany. Self references are working the very same way!
      | */

  section#associations-one-to-many
    h3 One-To-Many associations

    p
      | One-To-Many associations are connecting one source with multiple targets.
      | The targets however are again connected to exactly one specific source.

    pre.prettyprint.linenums
      | var User = sequelize.define('User', {/* ... */})
      | var Project = sequelize.define('Project', {/* ... */})
      | &nbsp;
      | // OK. Now things get more complicated (not really visible to the user :)).
      | // First let's define a hasMany association
      | Project.hasMany(User, {as: 'Workers'})
      | &nbsp;
      | /*
      |   This will add the attribute ProjectId or project_id to User.
      |   Instances of Project will get the accessors getWorkers and setWorkers.
      | &nbsp;
      |   We could just leave it the way it is and let it be a one-way association.
      |   But we want more! Let's define the other way around:
      | */

  section#associations-many-to-many
    h3.v1-5-0 Many-To-Many associations

    p
      | Many-To-Many associations are connecting sources with multiple targets.
      | Furthermore the targets can also have connections to multiple sources.

    pre.prettyprint.linenums
      | // again the Project association to User
      | Project.hasMany(User, { as: 'Workers' })
      | &nbsp;
      | // now comes the association between User and Project
      | User.hasMany(Project)
      | &nbsp;
      | /*
      |   This will remove the attribute ProjectId (or project_id) from User and create
      |   a new model called ProjectsUsers with the equivalent foreign keys ProjectId
      |   (or project_id) and UserId (or user_id). If the attributes are camelcase or
      |   not depends on the Model it represents.
      | &nbsp;
      |   Now you can use Project#getWorkers, Project#setWorkers, User#getTasks and
      |   User#setTasks.
      | */
      | &nbsp;
      | // Of course you can also define self references with hasMany:
      | &nbsp;
      | Person.hasMany(Person, { as: 'Children' })
      | // This will create the table ChildrenPersons which stores the ids of the objects.
      | &nbsp;
      | // Since v1.5.0 you can also reference the same Model without creating a junction
      | // table (but only if each object will have just one 'parent'). If you need that, 
      | // use the option foreignKey and useJunctionTable:
      | Person.hasMany(Person, { as: 'Children', foreignKey: 'ParentId', useJunctionTable: false })
      | &nbsp;
      | // You can also use a predefined junction table using the option joinTableName:
      | Project.hasMany(User, {joinTableName: 'project_has_users'})
      | User.hasMany(Project, {joinTableName: 'project_has_users'})

    section#associations-associate-objects
      h3 Associate objects

      p.v1-5-0
        | Because Sequelize is doing a lot of magic, you have to call
        | <code>Sequelize#sync</code> after setting the associations!
        | Doing so will allow you the following:

      pre.prettyprint.linenums
        | Project.hasMany(Task)
        | Task.hasMany(Project)
        | &nbsp;
        | Project.create()...
        | Task.create()...
        | Task.create()...
        | &nbsp;
        | // save them... and then:
        | project.setTasks([task1, task2]).success(function() {
        |   // saved!
        | })
        | &nbsp;
        | // ok now they are save... how do I get them later on?
        | project.getTasks().success(function(associatedTasks) {
        |   // associatedTasks is an array of tasks
        | })
        | &nbsp;
        | // You can also pass filters to the getter method.
        | // They are equal to the options you can pass to a usual finder method.
        | project.getTasks({ where: 'id > 10' }).success(function(tasks) {
        |   // tasks with an id greater than 10 :)
        | })
        | &nbsp;
        | // You can also only retrieve certain fields of a associated object.
        | // This example will retrieve the attibutes <code>title</code> and <code>id</code>
        | project.getTasks({attributes: ['title']}).success(function(tasks) {
        |   // tasks with an id greater than 10 :)
        | })
        

      p To remove created associations you can just call the set method without a specific id:

      pre.prettyprint.linenums
        | // remove the association with task1
        | project.setTasks([task2]).success(function(associatedTasks) {
        |   // you will get task2 only
        | })
        | &nbsp;
        | // remove 'em all
        | projects.setTasks([]).success(function(associatedTasks) {
        |   // you will get an empty array
        | })
        | &nbsp;
        | // or remove 'em more directly
        | projects.removeTask(task1).success(function() {
        |   // it's gone
        | })
        | &nbsp;
        | // and add 'em again
        | projects.addTask(task1).success(function() {
        |   // it's back again
        | })

      p You can of course also do it vice versa:
      pre.prettyprint.linenums
        | // project is associated with task1 and task2
        | task2.setProject(null).success(function() {
        |   // and it's gone
        | })

      p For hasOne/belongsTo its basically the same:
      pre.prettyprint.linenums
        | Task.hasOne(User, {as: "Author"})
        | Task#setAuthor(anAuthor)

    section#associations-check-associations
      h3.v1-5-0 Check associations

      p
        | Sequelize <code>v1.5.0</code> introduced methods which allows you,
        | to check if an object is already associated with another one (N:M only).
        | Here is how you'd do it:

      pre.prettyprint.linenums
        | // check if an object is one of associated ones:
        | Project.create({ /* */ }).success(function(project) {
        |   User.create({ /* */ }).success(function(user) {
        |     project.hasUser(user).success(function(result) {
        |       // result would be false
        |       project.addUser(user).success(function() {
        |         project.hasUser(user).success(function(result) {
        |           // result would be true
        |         })
        |       })
        |     })
        |   })
        | })
        | &nbsp;
        | // check if all associated objects are as expected:
        | // let's assume we have already a project and two users
        | project.setUsers([user1, user2]).success(function() {
        |   project.hasUsers([user1]).success(function(result) {
        |     // result would be false
        |     project.hasUsers([user1, user2]).success(function(result) {
        |       // result would be true
        |     })
        |   })
        | })

extends ../../layouts/with-sidebar

block documentation
  section
    div
      h2 Models

      h3#definition Definition

      p
        | To define mappings between a model and a table&comma; use the
        code define
        | method&period; Sequelize will then automatically add the attributes
        code createdAt
        | and
        code updatedAt
        | to it&period; So you will be able to know when the database entry went into the db and when it was updated the last time&period;
        | If you do not want timestamps on your models, only want some timestamps, or you are working with an existing database where the columns are named something else, jump straight onto 
        a(href='#configuration', rel='nofollow') configuration 
        | to see how to do that.
      pre.dark-blue
        code.javascript
          | var Project = sequelize.define('Project', {
          |   title: Sequelize.STRING,
          |   description: Sequelize.TEXT
          | })
          | &nbsp;
          | var Task = sequelize.define('Task', {
          |   title: Sequelize.STRING,
          |   description: Sequelize.TEXT,
          |   deadline: Sequelize.DATE
          | })

      p You can also set some options on each column&colon;
      pre.dark-blue
        code.javascript
          | var Foo = sequelize.define('Foo', {
          |   // instantiating will automatically set the flag to true if not set
          |   flag: { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: true},
          | &nbsp;
          |   // default values for dates => current time
          |   myDate: { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
          | &nbsp;
          |   // setting allowNull to false will add NOT NULL to the column, which means an error will be
          |   // thrown from the DB when the query is executed if the column is null. If you want to check that a value
          |   // is not null before querying the DB, look at the validations section below.
          |   title: { type: Sequelize.STRING, allowNull: false},
          | &nbsp;
          |   // Creating two objects with the same value will throw an error. Currently composite unique
          |   // keys can only be created 'addIndex' from the migration-section below
          |   someUnique: {type: Sequelize.STRING, unique: true},
          |   // Go on reading for further information about primary keys
          | &nbsp;
          |   identifier: { type: Sequelize.STRING, primaryKey: true},
          | &nbsp;
          |   // autoIncrement can be used to create auto_incrementing integer columns
          |   incrementMe: { type: Sequelize.INTEGER, autoIncrement: true }
          | &nbsp;
          |   // Comments can be specified for each field for MySQL and PG
          |   hasComment: { type: Sequelize.INTEGER, comment: "I'm a comment!" }
          | })

      p
        | The comment option can also be used on a table&comma; see&nbsp;
        a(href='#configuration', rel='nofollow', target='_blank') model configuration

      h3#data-types Data types
      p Sequelize currently supports the following datatypes&colon;
      pre.dark-blue
        code.javascript
          | Sequelize.STRING                      // VARCHAR(255)
          | Sequelize.STRING(1234)                // VARCHAR(1234)
          | Sequelize.STRING.BINARY               // VARCHAR BINARY
          | Sequelize.TEXT                        // TEXT
          | &nbsp;
          | Sequelize.INTEGER                     // INTEGER
          | Sequelize.BIGINT                      // BIGINT
          | Sequelize.BIGINT(11)                  // BIGINT(11)
          | Sequelize.FLOAT                       // FLOAT
          | Sequelize.FLOAT(11)                   // FLOAT(11)
          | Sequelize.FLOAT(11, 12)               // FLOAT(11,12)
          | &nbsp;
          | Sequelize.DECIMAL                     // DECIMAL
          | Sequelize.DECIMAL(10, 2)              // DECIMAL(10,2)
          | &nbsp;
          | Sequelize.DATE                        // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres
          | Sequelize.BOOLEAN                     // TINYINT(1)
          | &nbsp;
          | Sequelize.ENUM('value 1', 'value 2')  // An ENUM with allowed values 'value 1' and 'value 2'
          | Sequelize.ARRAY(Sequelize.TEXT)       // Defines an array. PostgreSQL only.
          | &nbsp;
          | Sequelize.BLOB                        // BLOB (bytea for PostgreSQL)
          | Sequelize.BLOB('tiny')                // TINYBLOB (bytea for PostgreSQL. Other options are medium and long)
          | Sequelize.UUID                        // UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL (use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make sequelize generate the ids automatically)

      p
        | The BLOB data type allows you to insert data both as strings and as buffers&period; When you do a find or findAll on a model which has a BLOB column&comma; that data will always be returned as a buffer&period;
      p
        | In addition to the type mentioned above&comma; integer&comma; bigint and float also support unsigned and zerofill properties&comma; which can be combined in any order&colon;
      pre.dark-blue
        code.javascript
          | Sequelize.INTEGER.UNSIGNED              // INTEGER UNSIGNED
          | Sequelize.INTEGER(11).UNSIGNED          // INTEGER(11) UNSIGNED
          | Sequelize.INTEGER(11).ZEROFILL          // INTEGER(11) ZEROFILL
          | Sequelize.INTEGER(11).ZEROFILL.UNSIGNED // INTEGER(11) UNSIGNED ZEROFILL
          | Sequelize.INTEGER(11).UNSIGNED.ZEROFILL // INTEGER(11) UNSIGNED ZEROFILL

      p
        em
          | The examples above only show integer&comma; but the same can be done with bigint and float
      p Usage in object notation&colon;
      pre.dark-blue
        code.javascript
          | // for enums:
          | sequelize.define('model', {
          |   states: {
          |     type:   Sequelize.ENUM,
          |     values: ['active', 'pending', 'deleted']
          |   }
          | })


      h3#getters---setters Getters & setters
      p
        | It is possible to define &apos;object-property&apos; getters and setter functions on your models&comma; these can be used both for &apos;protecting&apos; properties that map to database fields and for defining &apos;pseudo&apos; properties&period;
      p
        | Getters and Setters can be defined in 2 ways &lpar;you can mix and match these 2 approaches&excl;&rpar;&colon;
      ul
        li as part of a single property definition
        li as part of a model options
      p
        strong N&period;B&period;&colon;
        | If a getter or setter is defined in both places then the function found in the relevant property definition will always take precedence&period;
      h4#getters---setters-defining-as-part-of-a-property Defining as part of a property
      pre.dark-blue
        code.javascript
          | var Foo = sequelize.define('Foo', {
          |   name: { Sequelize.STRING },
          |   title: {
          |     type     : Sequelize.STRING,
          |     allowNull: false,
          |     get      : function()  {
          |        /*
          |          do your magic here and return something!
          |          'this' allows you to access attributes of the model.
          | &nbsp;
          |         example: this.getDataValue('name') works
          |       */
          |     },
          |     set      : function(v) { /* do your magic with the input here! */ }
          |   }
          | });

      h4#getters---setters-defining-as-part-of-the-model-options Defining as part of the model options
      p
        | Below is an example of defining the getters and setters in the model options&comma; notice the
        code title&UnderBar;slug
        | getter&comma; it shows how you can define
        code pseudo
        | properties on your models&excl; &lpar;the
        code slugify&lpar;&rpar;
        | function was taken from the&nbsp;
        a(href='https://github.com/epeli/underscore.string', rel='nofollow', target='_blank') Underscore&period;String module
        | &comma; it is slightly modified here so that the example remains self-contained&rpar;&comma; note that the
        code this&period;title
        | reference in the
        code title&UnderBar;slug
        | getter function will trigger a call to the
        code title
        | getter function&period; if you do not want that then
        | use the
        code getDataValue&lpar;&rpar;
        | method &lpar;
        a(href='#get_and_set_helper_funcs') see below
        | &rpar;&period;
      pre.dark-blue
        code.javascript
          | var defaultToWhiteSpace = function(characters) {
          |     if (characters == null)
          |       return '\\s';
          |     else if (characters.source)
          |       return characters.source;
          |     else
          |       return ;
          |   };
          | &nbsp;
          | var slugify function(str) {
          |   var from  = "ąàáäâãåæćęèéëêìíïîłńòóöôõøśùúüûñçżź",
          |       to    = "aaaaaaaaceeeeeiiiilnoooooosuuuunczz",
          |       regex = new RegExp('[' + from.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1') + ']', 'g');
          | &nbsp;
          |   if (str == null) return '';
          | &nbsp;
          |   str = String(str).toLowerCase().replace(regex, function(c) {
          |     return to.charAt(from.indexOf(c)) || '-';
          |   });
          | &nbsp;
          |   return str.replace(/[^\w\s-]/g, '').replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
          | }
          | &nbsp;
          | var Foo = sequelize.define('Foo', {
          |   title: {
          |     type     : Sequelize.STRING,
          |     allowNull: false,
          |   }
          | }, {
          | &nbsp;
          |   getterMethods   : {
          |     title       : function()  { /* do your magic here and return something! */ },
          |     title_slug  : function()  { return slugify(this.title); }
          |   },
          | &nbsp;
          |   setterMethods   : {
          |     title       : function(v) { /* do your magic with the input here! */ },
          |   }
          | });

      h4#getters---setters--helper-functions-for-use-inside-getter-setter-definitions
        a#get_and_set_helper_funcs
        | Helper functions for use inside getter&sol;setter definitions
      ul
        li
          | retrieving an underlying property value&quest; always use
          code this&period;getDataValue&lpar;&rpar;
          | &comma; e&period;g&period;&colon;
      pre.dark-blue
        code.javascript
          | /* a getter for 'title' property */
          | function() {
          |     return this.getDataValue('title');
          | }

      ul
        li
          | setting an underlying property value&quest; always use
          code this&period;setDataValue&lpar;&rpar;
          | &comma; e&period;g&period;&colon;
      pre.dark-blue
        code.javascript
          | /* a setter for 'title' property */
          | function(title) {
          |     return this.setDataValue('title', title.toString().toLowerCase());
          | }

      p
        strong N.B.:&nbsp;
        | It is important to stick to using the
        code setDataValue&lpar;&rpar;
        | and
        code getDataValue&lpar;&rpar;
        | functions &lpar;as opposed to accessing the underlying &quot;data values&quot; property directly&rpar; - doing so protects your custom getters and setters from changes in the underlying model implementations &lpar;i&period;e&period; how and where data values are stored in your model instances&rpar;
      h4#getters---setters-setter-methods-and-object-initialization Setter methods and Object Initialization
      p
        | &excl;&excl;&excl;TODO&colon; write about how setters affect object initialization &lpar;both creating new objects with Model&period;build and retrieving existing objects from storage&rpar; &excl;&excl;&excl;&excl;&excl;

      h3#validations Validations
      p
        | In
        code v1&period;3&period;0
        | model validations have been added&period; They allow you to specify format&sol;content&sol;inheritance validations for each attribute of the model&period; You can perform the validation by calling the
        code validate&lpar;&rpar;
        | method on an instance before saving&period; The validations are implemented by&nbsp;
        a(href='https://github.com/chriso/validator.js', rel='nofollow', target='_blank') validator
        | &comma; and we are currently using v&period; 3&period;2&period;x&period;
      p
        strong Note&colon;&nbsp;
        | In
        code v1&period;7&period;0
        | validations will now be called when executing the
        code build&lpar;&rpar;
        | or
        code create&lpar;&rpar;
        | functions&period;
      pre.dark-blue
        code.javascript
          | var ValidateMe = sequelize.define('Foo', {
          |   foo: {
          |     type: Sequelize.STRING,
          |     validate: {
          |       is: ["^[a-z]+$",'i'],     // will only allow letters
          |       not: ["[a-z]",'i'],       // will not allow letters
          |       isEmail: true,            // checks for email format (foo@bar.com)
          |       isUrl: true,              // checks for url format (http://foo.com)
          |       isIP: true,               // checks for IPv4 (129.89.23.1) or IPv6 format
          |       isIPv4: true,             // checks for IPv4 (129.89.23.1)
          |       isIPv6: true,             // checks for IPv6 format
          |       isAlpha: true,            // will only allow letters
          |       isAlphanumeric: true      // will only allow alphanumeric characters, so "_abc" will fail
          |       isNumeric: true           // will only allow numbers
          |       isInt: true,              // checks for valid integers
          |       isFloat: true,            // checks for valid floating point numbers
          |       isDecimal: true,          // checks for any numbers
          |       isLowercase: true,        // checks for lowercase
          |       isUppercase: true,        // checks for uppercase
          |       notNull: true,            // won't allow null
          |       isNull: true,             // only allows null
          |       notEmpty: true,           // don't allow empty strings
          |       equals: 'specific value', // only allow a specific value
          |       contains: 'foo',          // force specific substrings
          |       notIn: [['foo', 'bar']],  // check the value is not one of these
          |       isIn: [['foo', 'bar']],   // check the value is one of these
          |       notContains: 'bar',       // don't allow specific substrings
          |       len: [2,10],              // only allow values with length between 2 and 10
          |       isUUID: 4,                // only allow uuids
          |       isDate: true,             // only allow date strings
          |       isAfter: "2011-11-05",    // only allow date strings after a specific date
          |       isBefore: "2011-11-05",   // only allow date strings before a specific date
          |       max: 23,                  // only allow values <= 23
          |       min: 23,                  // only allow values >= 23
          |       isArray: true,            // only allow arrays
          |       isCreditCard: true,       // check for valid credit card numbers
          | &nbsp;
          |       // custom validations are also possible:
          |       isEven: function(value) {
          |         if(parseInt(value) % 2 != 0) {
          |           throw new Error('Only even values are allowed!')
          |         // we also are in the model's context here, so this.otherField
          |         // would get the value of otherField if it existed
          |         }
          |       }
          |     }
          |   }
          | })

      p
        | Note that where multiple arguments need to be passed to the built-in validation
        | functions&comma; the arguments to be passed must be in an array&period; But if a single array
        | argument is to be passed&comma; for instance an array of acceptable strings for
        code isIn
        | &comma; this will be interpreted as multiple string arguments instead of one
        | array argument&period; To work around this pass a single-length array of arguments&comma;
        | such as
        code &lsqb;&lsqb;&apos;one&apos;&comma; &apos;two&apos;&rsqb;&rsqb;
        | as shown above&period;
      p
        | To use a custom error message instead of that provided by node-validator&comma; use an
        | object instead of the plain value or array of arguments&comma; for example a validator
        | which needs no argument can be given a custom message with
      pre.dark-blue
        code.javascript
          | isInt: {
          |   msg: "Must be an integer number of pennies"
          | }

      p
        | or if arguments need to also be passed add an
        code args
        | property&colon;
      pre.dark-blue
        code.javascript
          | isIn: {
          |   args: [['en', 'zh']],
          |   msg: "Must be English or Chinese"
          | }

      p
        | When using custom validator functions the error message will be whatever message
        | the thrown
        code Error
        | object holds&period;
      p
        | See&nbsp;
        a(href='https://github.com/chriso/node-validator', rel='nofollow', target='_blank') the node-validator project
        | for
        | more details on the built in validation methods&period;
      p
        strong Hint&colon;&nbsp;
        | You can also define a custom function for the logging part&period; Just pass
        | a function&period; The first parameter will be the string that is logged&period;

      h4
        | Validators and
        code allowNull
      p
        | Since
        code v1&period;7&period;0
        | if a particular field of a model is set to allow null &lpar;with
        code allowNull&colon; true
        | &rpar; and that value has been set to
        code null
        | &comma; its validators do not
        | run&period; This means you can&comma; for instance&comma; have a string field which validates its
        | length to be at least 5 characters&comma; but which also allows
        code null
        | &period;
      h4#validations-model-validations Model validations
      p
        | Since
        code v1&period;7&period;0
        | &comma; validations can also be defined to check the model after the
        | field-specific validators&period; Using this you could&comma; for example&comma; ensure either
        | neither of
        code latitude
        | and
        code longitude
        | are set or both&comma; and
        | fail if one but not the other is set&period;
      p
        | Model validator methods are called with the model object&apos;s context and are
        | deemed to fail if they throw an error&comma; otherwise pass&period; This is just the same as
        | with custom field-specific validators&period;
      p
        | Any error messages collected are put in the validation result object alongside
        | the field validation errors&comma; with keys named after the failed validation
        | method&apos;s key in the
        code validate
        | option object&period; Even though there can only be one
        | error message for each model validation method at any one time&comma; it is presented
        | as a single string error in an array&comma; to maximize consistency with the field
        | errors&period; &lpar;Note that the structure of
        code validate&lpar;&rpar;
        | &apos;s output is scheduled to change
        | in
        code v2&period;0
        | to avoid this awkward situation&period; In the mean time&comma; an error is issued
        | if a field exists with the same name as a custom model validation&period;&rpar;
      p An example&colon;
      pre.dark-blue
        code.javascript
          | var Pub = Sequelize.define('Pub', {
          |   name: { type: Sequelize.STRING },
          |   address: { type: Sequelize.STRING },
          |   latitude: {
          |     type: Sequelize.INTEGER,
          |     allowNull: true,
          |     defaultValue: null,
          |     validate: { min: -90, max: 90 }
          |   },
          |   longitude: {
          |     type: Sequelize.INTEGER,
          |     allowNull: true,
          |     defaultValue: null,
          |     validate: { min: -180, max: 180 }
          |   },
          | }, {
          |   validate: {
          |     bothCoordsOrNone: function() {
          |       if ((this.latitude === null) === (this.longitude === null)) {
          |         throw new Error('Require either both latitude and longitude or neither')
          |       }
          |     }
          |   }
          | })

      p
        | In this simple case an object fails validation if latitude or longitude is
        | given&comma; but not both&period; If we try to build one with an out-of-range latitude and no
        | longitude&comma;
        code raging&UnderBar;bullock&UnderBar;arms&period;validate&lpar;&rpar;
        | might return
      pre.dark-blue
        code.javascript
          | {
          |   'latitude': ['Invalid number: latitude'],
          |   'bothCoordsOrNone': ['Require either both latitude and longitude or neither']
          | }

      h3#configuration Configuration
      p You can also influence the way Sequelize handles your column names&colon;
      pre.dark-blue
        code.javascript
          | var Bar = sequelize.define('Bar', { /* bla */ }, {
          |   // don't add the timestamp attributes (updatedAt, createdAt)
          |   timestamps: false,
          | &nbsp;
          |   // don't delete database entries but set the newly added attribute deletedAt
          |   // to the current date (when deletion was done). paranoid will only work if
          |   // timestamps are enabled
          |   paranoid: true,
          | &nbsp;
          |   // don't use camelcase for automatically added attributes but underscore style
          |   // so updatedAt will be updated_at
          |   underscored: true,
          | &nbsp;
          |   // disable the modification of tablenames; By default, sequelize will automatically
          |   // transform all passed model names (first parameter of define) into plural.
          |   // if you don't want that, set the following
          |   freezeTableName: true,
          | &nbsp;
          |   // define the table's name
          |   tableName: 'my_very_custom_table_name'
          | })

      p If you want sequelize to handle timestamps, but only want some of them, or want your timestamps to be called something else, you can override each column individually:
      pre.dark-blue
        code.javascript
          | var Foo = sequelize.define('Foo',  { /* bla */ }, {
          |   // don't forget to enable timestamps!
          |   timestamps: true,
          | &nbsp;
          |   // I don't want createdAt
          |   createdAt: false,
          | &nbsp;
          |   // I want updatedAt to actually be called updateTimestamp
          |   updatedAt: 'updateTimestamp'
          | &nbsp;
          |   // And deletedAt to be called destroyTime (remember to enable paranoid for this to work)
          |   deletedAt: 'destroyTime',
          |   paranoid: true
          | })

      p
        | You can also change the database engine&comma; e&period;g&period; to MyISAM&period; InnoDB is default since
        code v1&period;2&period;1
        | of Sequelize&period;
      pre.dark-blue
        code.javascript
          | var Person = sequelize.define('Person', { /* attributes */ }, {
          |   engine: 'MYISAM'
          | })
          | &nbsp;
          | // or globally
          | var sequelize = new Sequelize(db, user, pw, {
          |   define: { engine: 'MYISAM' }
          | })

      p Finaly you can specify a comment for the table in MySQL and PG
      pre.dark-blue
        code.javascript
          | var Person = sequelize.define('Person', { /* attributes */ }, {
          |   comment: "I'm a table comment!"
          | })

      h3#import Import
      p
        | You can also store your model definitions in a single file using the
        code import
        | -method&period; The returned object is exactly the same as defined in the imported file&apos;s function&period; Since
        code v1&period;5&period;0
        | of Sequelize the import is cached&comma; so you won&apos;t run into troubles when calling the import of a file twice or more often&period;
      pre.dark-blue
        code.javascript
          | // in your server file - e.g. app.js
          | var Project = sequelize.import(__dirname + "/path/to/models/project")
          | &nbsp;
          | // The model definition is done in /path/to/models/project.js
          | // As you might notice, the DataTypes are the very same as explained above
          | module.exports = function(sequelize, DataTypes) {
          |   return sequelize.define("Project", {
          |     name: DataTypes.STRING,
          |     description: DataTypes.TEXT
          |   })
          | }
      p
        | Since
        code v1&period;7&period;0
        | the
        code import
        | -method can now accept a callback as an argument&period;
      pre.dark-blue
        code.javascript
          | sequelize.import('Project', function(sequelize, DataTypes) {
          |   return sequelize.define("Project", {
          |     name: DataTypes.STRING,
          |     description: DataTypes.TEXT
          |   })
          | })

      h3#database-synchronization Database synchronization
      p
        | When starting a new project you won&apos;t have a database structure and using Sequelize you won&apos;t need to&period; Just specify your model structures and let the library do the rest&period; Currently supported is the creation and deletion of tables&colon;
      pre.dark-blue
        code.javascript
          | // Create the tables:
          | Project.sync() // will emit success or failure event
          | Task.sync() // will emit success or failure event
          | &nbsp;
          | // Force the creation!
          | Project.sync({force: true}) // this will drop the table first and re-create it afterwards
          | &nbsp;
          | // drop the tables:
          | Project.drop() // will emit success or failure event
          | Task.drop() // will emit success or failure event
          | &nbsp;
          | // event handling:
          | Project.[sync|drop]().success(function() {
          |   // ok ... everything is nice!
          | }).error(function(error) {
          |   // oooh, did you entered wrong database credentials?
          | })

      p
        | Because synchronizing and dropping all of your tables might be a lot of lines to write&comma; you can also let Sequelize do the work for you&colon;
      pre.dark-blue
        code.javascript
          | // create all tables... now!
          | sequelize.sync() // will emit success or failure
          | &nbsp;
          | // force it!
          | sequelize.sync({force: true}) // emit ... nomnomnom
          | &nbsp;
          | // want to drop 'em all?
          | sequelize.drop() // I guess you've got it (emit)
          | &nbsp;
          | // emit handling:
          | sequelize.[sync|drop]().success(function() {
          |   // woot woot
          | }).error(function(error) {
          |   // whooops
          | })

      h3#expansion-of-models Expansion of models
      p
        | Sequelize allows you to pass custom methods to a model and it&apos;s instances&period; Just do the following&colon;
      pre.dark-blue
        code.javascript
          | var Foo = sequelize.define('Foo', { /* attributes */}, {
          |   classMethods: {
          |     method1: function(){ return 'smth' }
          |   },
          |   instanceMethods: {
          |     method2: function() { return 'foo' }
          |   }
          | })
          | &nbsp;
          | // Example:
          | Foo.method1()
          | Foo.build().method2()

      p Of course you can also access the instance&apos;s data and generate virtual getters&colon;
      pre.dark-blue
        code.javascript
          | var User = sequelize.define('User', { firstname: Sequelize.STRING, lastname: Sequelize.STRING }, {
          |   instanceMethods: {
          |     getFullname: function() {
          |       return [this.firstname, this.lastname].join(' ')
          |     }
          |   }
          | })
          | &nbsp;
          | // Example:
          | User.build({ firstname: 'foo', lastname: 'bar' }).getFullname() // 'foo bar'

      p You can also set custom methods to all of your models during the instantiation&colon;
      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   // Other options during the initialization could be here
          |   define: {
          |     classMethods: {
          |       method1: function() {},
          |       method2: function() {}
          |     },
          |     instanceMethods: {
          |       method3: function() {}
          |     }
          |   }
          | })
          | &nbsp;
          | // Example:
          | var Foo = sequelize.define('Foo', { /* attributes */});
          | Foo.method1()
          | Foo.method2()
          | Foo.build().method3()

      h3#finders Data retrieval / Finders
      p
        | Finder methods are designed to get data from the database&period; The returned data isn&apos;t just a plain object&comma; but instances of one of the defined classes&period; Check the next major chapter about instances for further information&period; But as those things are instances&comma; you can e&period;g&period; use the just describe expanded instance methods&period; So&comma; here is what you can do&colon;
      h4#finders-find find - Search for one specific element in the database
      pre.dark-blue
        code.javascript
          | // search for known ids
          | Project.find(123).success(function(project) {
          |   // project will be an instance of Project and stores the content of the table entry
          |   // with id 123. if such an entry is not defined you will get null
          | })
          | &nbsp;
          | // search for attributes
          | Project.find({ where: {title: 'aProject'} }).success(function(project) {
          |   // project will be the first entry of the Projects table with the title 'aProject' || null
          | })
          | &nbsp;
          | // since v1.3.0: only select some attributes and rename one
          | Project.find({
          |   where: {title: 'aProject'},
          |   attributes: ['id', ['name', 'title']]
          | }).success(function(project) {
          |   // project will be the first entry of the Projects table with the title 'aProject' || null
          |   // project.title will contain the name of the project
          | })

      h4#finders-findorcreate findOrCreate - Search for a specific element or create it if not available
      p
        | The method
        code findOrCreate
        | can be used to check if a certain element is already existing in the database&period; If that is the case the method will result in a respective instance&period; If the element does not yet exist&comma; it will be created&period;
      p
        | Let&apos;s assume we have an empty database with a
        code User
        | model which has a
        code username
        | and a
        code job
        | &period;
      pre.dark-blue
        code.javascript
          | User
          |   .findOrCreate({ username: 'sdepold' }, { job: 'Technical Lead JavaScript' })
          |   .success(function(user, created) {
          |     console.log(user.values)
          |     console.log(created)
          |   &nbsp;
          |     /*
          |       {
          |         username: 'sdepold',
          |         job: 'Technical Lead JavaScript',
          |         id: 1,
          |         createdAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET),
          |         updatedAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET)
          |       }
          |       created: true
          |     */
          |   })

      p The code created a new instance&period;
      p So when we already have an instance &period;&period;&period;
      pre.dark-blue
        code.javascript
          | User
          |   .create({ username: 'fnord', job: 'omnomnom' })
          |   .success(function() {
          |     User
          |       .findOrCreate({ username: 'fnord' }, { job: 'something else' })
          |       .success(function(user, created) {
          |         console.log(user.values)
          |         console.log(created)
          |     &nbsp;
          |         /*
          |           {
          |             username: 'fnord',
          |             job: 'omnomnom',
          |             id: 2,
          |             createdAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET),
          |             updatedAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET)
          |           }
          |           created: false
          |         */
          |       })
          |   })

      p
        | &period;&period;&period; the existing entry will not be changed&period; See the
        code job
        | of the second user&comma; and the fact that created was false&period;

      p
        | Notice that the success callback has two arguments. When using
        a(href='/docs/latest/misc#asynchronicity') promises
        | you should call
        code spread
        a(href='https://github.com/petkaantonov/bluebird/blob/master/API.md#spreadfunction-fulfilledhandler--function-rejectedhandler----promise', target='_blank') (API ref)
        |instead of
        code then
        |, since
        code then
        |will only recieve the first argument (the DAO), while
        code spread
        |will recieve both the DAO, and the
        code created
        |boolean.

      h4#finders-findandcountall
        | findAndCountAll - Search for multiple elements in the database&comma; returns both data and total count
      p
        | This is a convienience method that combines
        code findAll&lpar;&rpar;
        | and
        code count&lpar;&rpar;
        | &lpar;see below&rpar;&comma; this is useful when dealing with queries related to pagination
        | where you want to retrieve data with a
        code limit
        | and
        code offset
        | but also need to know the total number of records that match the query&period;
      p The success handler will always receive an object with to properties&colon;
      ul
        li
          code count
          | - an integer&comma; total number records &lpar;matching the where clause&rpar;
        li
          code rows
          | - an array of objects&comma; the records &lpar;matching the where clause&rpar; within the limit&sol;offset range
      pre.dark-blue
        code.javascript
          | Project
          |   .findAndCountAll({
          |      where: ["title LIKE 'foo%'"],
          |      offset: 10,
          |      limit: 2
          |   })
          |   .success(function(result) {
          |     console.log(result.count);
          |     console.log(result.rows);
          |   });

      p
        | The options &lsqb;object&rsqb; that you pass to
        code findAndCountAll&lpar;&rpar;
        | is the same as for
        code findAll&lpar;&rpar;
        | &lpar;described below&rpar;&period;
      h4#finders-findall findAll - Search for multiple elements in the database
      pre.dark-blue
        code.javascript
          | // find multiple entries
          | Project.findAll().success(function(projects) {
          |   // projects will be an array of all Project instances
          | })
          | &nbsp;
          | // also possible:
          | Project.all().success(function(projects) {
          |   // projects will be an array of all Project instances
          | })
          | &nbsp;
          | // search for specific attributes - hash usage
          | Project.findAll({ where: { name: 'A Project' } }).success(function(projects) {
          |   // projects will be an array of Project instances with the specified name
          | })
          | &nbsp;
          | // search with string replacements
          | Project.findAll({ where: ["id > ?", 25] }).success(function(projects) {
          |   // projects will be an array of Projects having a greater id than 25
          | })
          | &nbsp;
          | // search within a specific range
          | Project.findAll({ where: { id: [1,2,3] } }).success(function(projects) {
          |   // projects will be an array of Projects having the id 1, 2 or 3
          |   // this is actually doing an IN query
          | })
          | &nbsp;
          | // or
          | Project.findAll({ where: "name = 'A Project'" }).success(function(projects) {
          |   // the difference between this and the usage of hashes (objects) is, that string usage
          |   // is not sql injection safe. so make sure you know what you are doing!
          | })
          | &nbsp;
          | // since v1.7.0 we can now improve our where searches
          | Project.findAll({
          |   where: {
          |     id: {
          |       gt: 6,              // id > 6
          |       gte: 6,             // id >= 6
          |       lt: 10,             // id < 10
          |       lte: 10,            // id <= 10
          |       ne: 20,             // id != 20
          |       between: [6, 10],   // BETWEEN 6 AND 10
          |       nbetween: [11, 15]  // NOT BETWEEN 11 AND 15
          |     }
          |   }
          | })

      h4#finders-complex-where-queries Complex filtering / OR queries
      p
        | Since <code>v1.7.0-rc3</code>, it is possible to do complex where queries with
        | multiple levels of nested AND and OR conditions. In order to do that you
        | can use <code>Sequelize.or</code> and <code>Sequelize.and</code> and pass
        | an arbitrary amount of arguments to it. Every argument will get transformed
        | into a proper SQL condition and gets joined with the either <code>AND</code> or
        | <code>OR</code>.

      pre.dark-blue
        code.javascript
          | Project.find({
          |   where: Sequelize.and(
          |     { name: 'a project' },
          |     Sequelize.or(
          |       { id: [1,2,3] },
          |       { id: { lt: 10 } }
          |     )
          |   )
          | })

      p This code will generate the following query:
      pre.dark-blue
        code.javascript
          | SELECT *
          | FROM `Projects`
          | WHERE (
          |   `Projects`.`name`='a project'
          |    AND (`Projects`.`id` IN (1,2,3) OR `Projects`.`id` < 10)
          | )
          | LIMIT 1
          | ;

      p
        | Notice, that instead of <code>Sequelize.and</code> you can also use a plain array
        | which will be treated as <code>Sequelize.and</code> if it contains
        | objects or hashes or other complex data types.
        | Furthermore you can use <code>Sequelize.or</code> as value for the where clause.

      h4#finders-limit---offset---order---group Manipulating the dataset with limit&comma; offset&comma; order and group
      p To get more relevant data&comma; you can use limit&comma; offset&comma; order and grouping&colon;
      pre.dark-blue
        code.javascript
          | // limit the results of the query
          | Project.findAll({ limit: 10 })
          | &nbsp;
          | // step over the first 10 elements
          | Project.findAll({ offset: 10 })
          | &nbsp;
          | // step over the first 10 elements, and take 2
          | Project.findAll({ offset: 10, limit: 2 })

      p
        | The syntax for grouping and ordering are equal&comma; so below it is only explained with a single example for group&comma; and the rest for order&period; Everything you see below can also be done for group
      pre.dark-blue
        code.javascript
          | Project.findAll({order: 'title DESC'})
          | // yields ORDER BY title DESC
          | &nbsp;
          | Project.findAll({group: 'name'})
          | // yields GROUP BY name

      p
        | Notice how in the two examples above&comma; the string provided is inserted verbatim into the query&comma; i&period;e&period; column names are not escaped&period; When you provide a string to order &sol; group&comma; this will always be the case as per v 1&period;7&period;0&period; If you want to escape column names&comma; you should provide an array of arguments&comma; even though you only want to order &sol; group by a single column
      pre.dark-blue
        code.javascript
          | something.find({
          |   order: [
          |     'name',
          |     // will return `name`
          |     'username DESC',
          |     // will return `username DESC` -- i.e. don't do it!
          |     ['username', 'DESC'],
          |     // will return `username` DESC
          |     sequelize.fn('max', sequelize.col('age')),
          |     // will return max(`age`)
          |     [sequelize.fn('max', sequelize.col('age')), 'DESC'],
          |     // will return max(`age`) DESC
          |     [sequelize.fn('otherfunction', sequelize.col('col1'), 12, 'lalala'), 'DESC'],
          |     // will return otherfunction(`col1`, 12, 'lalala') DESC
          |     [sequelize.fn('otherfunction', sequelize.fn('awesomefunction', sequelize.col('col'))), 'DESC']
          |     // will return otherfunction(awesomefunction(`col`)) DESC, This nesting is potentially infinite!
          |     [{ raw: 'otherfunction(awesomefunction(`col`))' }, 'DESC']
          |     // This won't be quoted, but direction will be added
          |   ]
          | })

      p To recap&comma; the elements of the order &sol; group array can be the following&colon;
      ul
        li String - will be quoted
        li Array - first element will be qouted&comma; second will be appended verbatim
        li
          | Object -
          ul
            li Raw will be added verbatim without quoting
            li Everything else is ignored&comma; and if raw is not set&comma; the query will fail
        li Sequelize&period;fn and Sequelize&period;col returns functions and quoted cools
      h4#finders-raw Raw queries
      p
        | Sometimes you might be expecting a massive dataset that you just want to display&comma; without manipulation&period; For each row you select&comma; Sequelize creates a
        em DAO
        | &comma; with functions for update&comma; delete&comma; get associations etc&period; If you have thousands of rows&comma; this might take some time&period; If you only need the raw data and don&apos;t want to update anything&comma; you can do like this to get the raw data&period;
      pre.dark-blue
        code.javascript
          | // Are you expecting a masssive dataset from the DB, and don't want to spend the time building DAOs for each entry?
          | // You can pass an extra query option to get the raw data instead:
          | Project.findAll({ where: ... }, { raw: true })

      h4#finders-count count - Count the occurences of elements in the database
      p There is also a method for counting database objects&colon;
      pre.dark-blue
        code.javascript
          | Project.count().success(function(c) {
          |   console.log("There are " + c + " projects!")
          | })
          | &nbsp;
          | Project.count({ where: ["id > ?", 25] }).success(function(c) {
          |   console.log("There are " + c + " projects with an id greater than 25.")
          | })

      h4#finders-max max - Get the greatest value of a specific attribute within a specific table
      p And here is a method for getting the max value of an attribute&colon;
      pre.dark-blue
        code.javascript
          | /*
          |   Let's assume 3 person objects with an attribute age.
          |   The first one is 10 years old,
          |   the second one is 5 years old,
          |   the third one is 40 years old.
          | */
          | Project.max('age').success(function(max) {
          |   // this will return 40
          | })
          | &nbsp;
          | Project.max('age', { where: { age: { lt: 20 } } }).success(function(max) {
          |   // wil be 10
          | })


      h4#finders-min min - Get the least value of a specific attribute within a specific table
      p And here is a method for getting the min value of an attribute&colon;
      pre.dark-blue
        code.javascript
          | /*
          |   Let's assume 3 person objects with an attribute age.
          |   The first one is 10 years old,
          |   the second one is 5 years old,
          |   the third one is 40 years old.
          | */
          | Project.min('age').success(function(min) {
          |   // this will return 5
          | })
          | &nbsp;
          | Project.min('age', { where: { age: { gt: 5 } } }).success(function(min) {
          |   // wil be 10
          | })


      h4#finder-sum sum - Sum the value of specific attributes
      p
        | In order to calculate the sum over a specific column of a table, you can
        | use the `sum` method.
      pre.dark-blue
        code.javascript
          | /*
          |   Let's assume 3 person objects with an attribute age.
          |   The first one is 10 years old,
          |   the second one is 5 years old,
          |   the third one is 40 years old.
          | */
          | Project.sum('age').success(function(sum) {
          |   // this will return 55
          | })
          | &nbsp;
          | Project.sum('age', { where: { age: { gt: 5 } } }).success(function(sum) {
          |   // wil be 50
          | })


      h3#eager-loading Eager loading
      p
        | When you are retrieving data from the database there is a fair chance that you also want to get their associations&period; This is possible since
        code v1&period;6&period;0
        | and is called eager loading&period; The basic idea behind that&comma; is the use of the attribute
        code include
        | when you are calling
        code find
        | or
        code findAll
        | &period; Lets assume the following setup&colon;
      pre.dark-blue
        code.javascript
          | var User = sequelize.define('User', { name: Sequelize.STRING })
          |   , Task = sequelize.define('Task', { name: Sequelize.STRING })
          |   , Tool = sequelize.define('Tool', { name: Sequelize.STRING })
          | &nbsp;
          | Task.belongsTo(User)
          | User.hasMany(Task)
          | User.hasMany(Tool, { as: 'Instruments' })
          | &nbsp;
          | sequelize.sync().done(function() {
          |   // this is where we continue ...
          | })

      p OK&period; So&comma; first of all&comma; let&apos;s load all tasks with their associated user&period;
      pre.dark-blue
        code.javascript
          | Task.findAll({ include: [ User ] }).success(function(tasks) {
          |   console.log(JSON.stringify(tasks))
          | &nbsp;
          |   /*
          |     [{
          |       "name": "A Task",
          |       "id": 1,
          |       "createdAt": "2013-03-20T20:31:40.000Z",
          |       "updatedAt": "2013-03-20T20:31:40.000Z",
          |       "UserId": 1,
          |       "user": {
          |         "name": "John Doe",
          |         "id": 1,
          |         "createdAt": "2013-03-20T20:31:45.000Z",
          |         "updatedAt": "2013-03-20T20:31:45.000Z"
          |       }
          |     }]
          |   */
          | })

      p
        | Notice that the accessor of the associated data is the name of the model in camelcase with lowercased first character&period; Also the accessor is singular as the association is one-to-something&period;
      p Next thing&colon; Loading of data with many-to-something associations&excl;
      pre.dark-blue
        code.javascript
          | User.findAll({ include: [ Task ] }).success(function(users) {
          |   console.log(JSON.stringify(users))
          | &nbsp;
          |   /*
          |     [{
          |       "name": "John Doe",
          |       "id": 1,
          |       "createdAt": "2013-03-20T20:31:45.000Z",
          |       "updatedAt": "2013-03-20T20:31:45.000Z",
          |       "tasks": [{
          |         "name": "A Task",
          |         "id": 1,
          |         "createdAt": "2013-03-20T20:31:40.000Z",
          |         "updatedAt": "2013-03-20T20:31:40.000Z",
          |         "UserId": 1
          |       }]
          |     }]
          |   */
          | })

      p
        | Notice that the accessor is plural&period; This is because the association is many-to-something&period;
      p
        | If an association is aliased &lpar;using the
        code as
        | option&rpar;&comma; you
        em must
        | specify this alias when including the model&period; Notice how the user&apos;s
        code Tool
        | s are aliased as
        code Instruments
        | above&period; In order to get that right you have to specify the model you want to load&comma; as well as the alias&colon;
      pre.dark-blue
        code.javascript
          | User.findAll({ include: [{ model: Tool, as: 'Instruments' }] }).success(function(users) {
          |   console.log(JSON.stringify(users))
          | &nbsp;
          |   /*
          |     [{
          |       "name": "John Doe",
          |       "id": 1,
          |       "createdAt": "2013-03-20T20:31:45.000Z",
          |       "updatedAt": "2013-03-20T20:31:45.000Z",
          |       "instruments": [{
          |         "name": "Toothpick",
          |         "id": 1,
          |         "createdAt": null,
          |         "updatedAt": null,
          |         "UserId": 1
          |       }]
          |     }]
          |   */
          | })

      h3#ordered-eager-loading Ordering Eager Loaded Associations
      p
        | In the case of a one-to-many relationship.
      pre.dark-blue
        code.javascript
          | Company.findAll({ include: [ Division ], order: [ [ Division, 'name' ] ] });
          | Company.findAll({ include: [ Division ], order: [ [ Division, 'name', 'DESC' ] ] });
          | Company.findAll({
          |   include: [ { model: Division, as: 'Div' } ],
          |   order: [ [ { model: Division, as: 'Div' }, 'name' ] ]
          | });
          | Company.findAll({
          |   include: [ { model: Division, include: [ Department ] } ],
          |   order: [ [ Division, Department, 'name' ] ]
          | });
      p
        | In the case of many-to-many joins, you are also able to sort by attributes in the through table.
      pre.dark-blue
        code.javascript
          | Company.findAll({
          |   include: [ { model: Division, include: [ Department ] } ],
          |   order: [ [ Division, DepartmentDivision, 'name' ] ]
          | });


      h3#nested-eager-loading Nested eager loading
        pre.dark-blue
          code.javascript
            | User.findAll({
            |   include: [
            |     {model: Tool, as: 'Instruments', include: [
            |       {model: Teacher, include: [ /* etc */]}
            |     ]}
            |   ]
            | }).success(function(users) {
            |   console.log(JSON.stringify(users))
            | &nbsp;
            |   /*
            |     [{
            |       "name": "John Doe",
            |       "id": 1,
            |       "createdAt": "2013-03-20T20:31:45.000Z",
            |       "updatedAt": "2013-03-20T20:31:45.000Z",
            |       "instruments": [{ // 1:M and N:M association
            |         "name": "Toothpick",
            |         "id": 1,
            |         "createdAt": null,
            |         "updatedAt": null,
            |         "UserId": 1,
            |         "Teacher": { // 1:1 association
            |           "name": "Jimi Hendrix"
            |         }
            |       }]
            |     }]
            |   */
            | })

      p
        strong Final note&colon;
        | If you include an object which is not associated&comma; Sequelize will throw an error&period;
      pre.dark-blue
        code.javascript
          | Tool.findAll({ include: [ User ] }).success(function(tools) {
          |   console.log(JSON.stringify(tools))
          | })
          | &nbsp;
          | // Error: User is not associated to Tool!



extends ../../layouts/with-sidebar

block documentation
  section
    div
      h2 Usage

      h3#basics Basic usage

      p
        | To get the ball rollin&apos; you first have to create an instance of Sequelize&period; Use it the following way&colon;
      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username'[, 'password'])

      p
        | This will save the passed database credentials and provide all further methods&period; Furthermore you can specify a non-default host&sol;port&colon;
      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   host: "my.server.tld",
          |   port: 12345
          | })

      p If you just don&apos;t have a password&colon;
      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username')
          | // or
          | var sequelize = new Sequelize('database', 'username', null)

      p You can also use a connection string&colon;
      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('mysql://user:pass@example.com:9821/dbname', {
          |   // Look to the next section for possible options
          | })

      h3#options Options
      p
        | Besides the host and the port&comma; Sequelize comes with a whole bunch of options&period; Here they are&colon;
      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   // custom host; default: localhost
          |   host: 'my.server.tld',
          | &nbsp;
          |   // custom port; default: 3306
          |   port: 12345,
          | &nbsp;
          |   // custom protocol
          |   // - default: 'tcp'
          |   // - added in: v1.5.0
          |   // - postgres only, useful for heroku
          |   protocol: null,
          | &nbsp;
          |   // logging function; first parameter is string that will be logged
          |   // default: false
          |   logging: console.log,
          | &nbsp;
          |   // max concurrent database requests; default: 50
          |   maxConcurrentQueries: 100,
          | &nbsp;
          |   // the sql dialect of the database
          |   // - default is 'mysql'
          |   // - currently supported: 'mysql', 'sqlite', 'postgres', 'mariadb'
          |   dialect: 'mysql',
          | &nbsp;
          |   // you can also pass any dialect options to the underlying dialect library
          |   // - default is empty
          |   // - currently supported: 'mysql', 'mariadb'
          |   dialectOptions: {
          |     socketPath: '/Applications/MAMP/tmp/mysql/mysql.sock',
          |     supportBigNumbers: true,
          |     bigNumberStrings: true
          |   },
          | &nbsp;
          |   // the storage engine for sqlite
          |   // - default ':memory:'
          |   storage: 'path/to/database.sqlite',
          | &nbsp;
          |   // disable inserting undefined values as NULL
          |   // - default: false
          |   omitNull: true,
          | &nbsp;
          |   // a flag for using a native library or not.
          |   // in the case of 'pg' -- set this to true will allow SSL support
          |   // - default: false
          |   native: true,
          | &nbsp;
          |   // Specify options, which are used when sequelize.define is called.
          |   // The following example:
          |   //   define: {timestamps: false}
          |   // is basically the same as:
          |   //   sequelize.define(name, attributes, { timestamps: false })
          |   // so defining the timestamps for each model will be not necessary
          |   // Below you can see the possible keys for settings. All of them are explained on this page
          |   define: {
          |     underscored: false
          |     freezeTableName: false,
          |     syncOnAssociation: true,
          |     charset: 'utf8',
          |     collate: 'utf8_general_ci',
          |     classMethods: {method1: function() {}},
          |     instanceMethods: {method2: function() {}},
          |     timestamps: true
          |   },
          | &nbsp;
          |   // similiar for sync: you can define this to always force sync for models
          |   sync: { force: true },
          | &nbsp;
          |   // sync after each association (see below). If set to false, you need to sync manually after setting all associations. Default: true
          |   syncOnAssociation: true,
          | &nbsp;
          |   // use pooling in order to reduce db connection overload and to increase speed
          |   // currently only for mysql and postgresql (since v1.5.0)
          |   pool: { maxConnections: 5, maxIdleTime: 30},
          | &nbsp;
          |   // language is used to determine how to translate words into singular or plural form based on the [lingo project](https://github.com/visionmedia/lingo)
          |   // options are: en [default], es
          |   language: 'en'
          | })

      p
        strong Hint&colon;
        | &nbsp;You can also define a custom function for the logging part&period; Just pass a function&period; The first parameter will be the string that is logged&period;

      h3#read-replication Read replication
      p
        | Sequelize supports read replication&comma; i&period;e&period; having multiple servers that you can connect to when you want to do a SELECT query&period; When you do read replication&comma; you specify one or more servers to act as read replicas&comma; and one server to act as the write master&comma; which handles all writes and updates and propagates them to the replicas &lpar;note that the actual replication process is
        strong &nbsp;not&nbsp;
        | handled by Sequelize&comma; but should be set up in MySql&rpar;&period;
      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', null, null, {
          |   dialect: 'mysql',
          |   port: 3306
          |   replication: {
          |     read: [
          |       { host: '8.8.8.8', username: 'anotherusernamethanroot', password: 'lolcats!' },
          |       { host: 'localhost', username: 'root', password: null }
          |     ],
          |     write: { host: 'localhost', username: 'root', password: null }
          |   },
          |   pool: { // If you want to override the options used for the read pool you can do so here
          |     maxConnections: 20,
          |     maxIdleTime: 30000
          |   },
          | })

      p
        | If you have any general settings that apply to all replicas you do not need to provide them for each instance&period; In the code above&comma; database name and port is propagated to all replicas&period; The same will happen for user and password&comma; if you leave them out for any of the replicas&period; Each replica has the following options&colon;
        code host
        | &comma;
        code port
        | &comma;
        code username
        | &comma;
        code password
        | &comma;
        code database
      p
        | Sequelize uses a pool to manage connections to your replicas&period; The default options are&colon;
      pre.dark-blue
        code.javascript
          | {
          |   maxConnections: 10,
          |   minConnections: 0,
          |   maxIdleTime:    1000
          | }

      p
        | If you want to modify these&comma; you can pass pool as an options when instantiating Sequelize&comma; as shown above&period;
      p
        strong Note&colon;
        | &nbsp;Read replication only works for MySQL at the moment&excl;

      h3#dialects Dialects
      p
        | With the release of Sequelize
        code v1&period;6&period;0
        | &comma; the library got independent from specific dialects&period; That mean&comma; that you&apos;ll have to add the respective dialect library yourself&period; Another option is the use of the sequelize packages that ship the dialect libraries as well&period;
      h4#dialects-mysql MySQL
      p
        | In order to get Sequelize working nicely together with MySQL&comma; you&apos;ll need to install
        code mysql&commat;~2&period;0&period;0-alpha7
        | &period; Once that&apos;s done you can use it like this&colon;
      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   // mysql is the default dialect, but you know...
          |   // for demo purporses we are defining it nevertheless :)
          |   // so: we want mysql!
          |   dialect: 'mysql'
          | })

      p
        | Also possible is the use of
        code sequelize-mysql
        | &period; Just install it via
        code npm install sequelize-mysql
        | and use it like this&colon;
      pre.dark-blue
        code.javascript
          | var Sequelize = require('sequelize-mysql').sequelize
          | var mysql     = require('sequelize-mysql').mysql
          | &nbsp;
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   // mysql is the default dialect, but you know...
          |   // for demo purporses we are defining it nevertheless :)
          |   // so: we want mysql!
          |   dialect: 'mysql'
          | })

      p
        | <strong>Note:</strong> You can pass options directly to dialect library by setting the
        | <code>dialectOptions</code> parameter. See <a href="/docs/latest/usage#options">Options</a>
        | for examples (currently only mysql and mariadb are supported).

      h4#dialects-mariadb MariaDB
      p
        | For MariaDB compatibility you have to install the package <code>mariasql</code>.
        | The configuration needs to look like this:
      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   dialect: 'mariadb'
          | })

      h4#dialects-sqlite SQLite
      p
        | For SQLite compatibility you&apos;ll need
        code sqlite3&commat;~2&period;1&period;5
        | &period; Configure Sequelize like this&colon;
      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   // sqlite! now!
          |   dialect: 'sqlite',
          | &nbsp;
          |   // the storage engine for sqlite
          |   // - default ':memory:'
          |   storage: 'path/to/database.sqlite'
          | })

      p
        | If you want to use the bundled version&comma; run
        code npm install sequelize-sqlite
        | and use the following code&colon;
      pre.dark-blue
        code.javascript
          | var Sequelize = require('sequelize-sqlite').sequelize
          | var sqlite    = require('sequelize-sqlite').sqlite
          | &nbsp;
          |  var sequelize = new Sequelize('database', 'username', 'password', {
          |   dialect: 'sqlite',
          |   storage: 'path/to/database.sqlite'
          | })

      h4#dialects-postgresql PostgreSQL
      p
        | The library for PostgreSQL is
        code pg&commat;~2&period;0&period;0
        | &period; You&apos;ll just need to define the dialect&colon;
      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   // gimme postgres, please!
          |   dialect: 'postgres'
          | })

      p
        | In order to use the bundled version&comma; use this
        code npm install sequelize-postgres
        | and require the lib this way&colon;
      pre.dark-blue
        code.javascript
          | var Sequelize = require('sequelize-postgres').sequelize
          | var postgres  = require('sequelize-postgres').postgres
          | &nbsp;
          |  var sequelize = new Sequelize('database', 'username', 'password', {
          |   dialect: 'postgres'
          | })

      h3#raw-queries Executing raw SQL queries
      p
        | As there are often use cases in which it is just easier to execute raw &sol; already prepared SQL queries&comma; you can utilize the function
        code sequelize&period;query
        | &period;
      p Here is how it works&colon;
      pre.dark-blue
        code.javascript
          | // Arguments for raw queries
          | sequelize.query('your query', [, callee], [, options], [, replacements])
          | &nbsp;
          | // Quick example
          | sequelize.query("SELECT * FROM myTable").success(function(myTableRows) {
          |   console.log(myTableRows)
          | })
          | &nbsp;
          | // Callee is the model definition. This allows you to easily map a query
          | // to a predefined model for sequelizejs e.g:
          | sequelize.query('SELECT * FROM projects', Projects).success(function(projects){
          |   console.log(projects) // Each record will now be mapped to the Projects DAO/factory.
          | });
          | &nbsp;
          | /*
          | Options is an object with the following keys:
          | {
          |   logging: console.log, // A function (or false) for logging your queries
          |   plain: false,         // If plain is true, then sequelize will only return the first record of the result set. In case of false it will all records.
          |   raw: false            // Set this to true if you don't have a model definition for your query
          | }
          | */
          | &nbsp;
          | // Note the second argument being null!
          | // Even if we declared a callee here, the raw: true would supersede and return a raw object.
          | sequelize.query('SELECT * FROM projects', null, {raw: true}).success(function(projects) {
          |   console.log(projects)
          | })
          | &nbsp;
          | /*
          | Replacements in a query can be done in two different ways, either using named parameters (starting with :), or unnamed, represented by a ?
          | &nbsp;
          | The syntax used depends on the fourth argument passed to the function:
          |   * If an array is passed, ? will be replaced in the order that they appear in the array
          |   * If an object is passed, :key will be replaced with the keys from that object. If the object contains keys not found in the query or vice verca,
          |     an exception will be thrown.
          | */
          | sequelize.query('SELECT * FROM projects WHERE status = ?', null, {raw: true}, ['active']).success(function(projects) {
          |   console.log(projects)
          | })
          | &nbsp;
          | sequelize.query('SELECT * FROM projects WHERE status = :status ', null, {raw: true}, { status: 'active' }).success(function(projects) {
          |   console.log(projects)
          | })

      p
        strong One note&colon;&nbsp;
        | If the attribute names of the table contain dots&comma; the resulting objects will get a nesting&colon;
      pre.dark-blue
        code.javascript
          | sequelize.query('select 1 as `foo.bar.baz`').success(function(rows) {
          |   console.log(JSON.stringify(rows))
          | &nbsp;
          |   /*
          |     [{
          |       "foo": {
          |         "bar": {
          |           "baz": 1
          |         }
          |       }
          |     }]
          |   */
          | })

extends ../../layouts/with-sidebar

block documentation
  section
    div
      h2 Migrations

      p
        | Sequelize
        code v1&period;3&period;0
        | introduced migrations&period; With those mechanism you can transform your existing database into another state and vice versa&period; Those state transitions are saved in migration files&comma; which describe the way how to get to the new state and how to revert the changes in order to get back to the old state&period;

      h3#installing-the-binary Installing the binary cli
      p
        | Install the command line interface with npm &colon;
      pre.dark-blue
        code.bash.
          npm install sequelize-cli -g


      h3#the-binary The binary
      p
        | In order to run migrations&comma; sequelize comes with a handy binary file which can setup your project and run migrations&period; The following snippet shows the possible things&colon;
      pre.dark-blue
        code.bash.
          sequelize -h
          sequelize --help
          # prints the help

          sequelize -V
          sequelize --version
          # prints the version

          sequelize -i
          sequelize --init
          # creates a migration folder
          # creates a config folder
          # saves a config.json inside the config folder

          sequelize -e [environment]
          sequelize --env [environment]
          # Use the passed environment. Default: development

          sequelize -i -f
          sequelize --init --force
          # forced creation of migration and config folder
          # existing data will be deleted first

          sequelize -m
          sequelize --migrate
          # needs a valid config.json
          # runs pending migrations
          # saves successfully executed migrations inside the database

          sequelize -m -u
          sequelize --migrate --undo
          # needs a valid config.json
          # reverts the last successfull migration
          # when there were multiple executed migrations, all of them are reverted

          sequelize -c [migration-name]
          sequelize --create-migration [migration-name]
          # creates the migrations folder
          # creates a file with current timestamp + migration-name
          # migration-name has the default 'unnamed-migration'

          sequelize -p [path]
          sequelize --migration-path [path]
          # Defines the path to the migration directory.

          sequelize -o [path]
          sequelize --options-path [path]
          # Defines the path to the options file.
          # The options file (.js or .json) needs to return an object.
          # Keys / values references cli options
          # e.g.: { migrationPath: 'db/migrations' }

          sequelize --config [path]
          # Defines the path to the configuration file.

          sequelize --coffee
          # Enables coffeescript support.

      h3#skeleton Skeleton
      p
        | The following skeleton shows a typical migration file&period; All migrations are expected to be located in a folder called
        code migrations
        | at the very top of the project&period; Sequelize
        code 1&period;4&period;1
        | added the possibility to let the sequelize binary generate a migration skeleton&period; See the aboves section for more details&period;
      pre.dark-blue
        code.javascript
          | module.exports = {
          |   up: function(migration, DataTypes, done) {
          |     // logic for transforming into the new state
          |     done() // sets the migration as finished
          |   },
          | &nbsp;
          |   down: function(migration, DataTypes, done) {
          |     // logic for reverting the changes
          |     done() // sets the migration as finished
          |   }
          | }

      p
        | The passed
        code migration
        | object can be used to modify the database&period; The
        code DataTypes
        | object stores the available data types such as
        code STRING
        | or
        code INTEGER
        | &period; The third parameter is a callback function which needs to be called once everything was executed&period; The first parameter of the callback function can be used to pass a possible error&period; In that case&comma; the migration will be marked as failed&period; Here is some code&colon;
      pre.dark-blue
        code.javascript
          | module.exports = {
          |   up: function(migration, DataTypes, done) {
          |     migration.dropAllTables().complete(done)
          | &nbsp;
          |     // equals:
          |     migration.dropAllTables().complete(function(err) {
          |       if (err) {
          |         done(err)
          |       } else {
          |         done(null)
          |       }
          |     })
          |   }
          | }

      p The available methods of the migration object are the following&period;


      h3#functions Functions
      p
        | Using the
        code migration
        | object describe before&comma; you will have access to most of already introduced functions&period; Furthermore there are some other methods&comma; which are designed to actually change the database schema&period;
      h4#functions-createtable createTable&lpar;tableName&comma; attributes&comma; options&rpar;
      p
        | This method allows creation of new tables&period; It is allowed to pass simple or complex attribute definitions&period; You can define the encoding of the table and the table&apos;s engine via options
      pre.dark-blue
        code.javascript
          | migration.createTable(
          |   'nameOfTheNewTable',
          |   {
          |     id: {
          |       type: DataTypes.INTEGER,
          |       primaryKey: true,
          |       autoIncrement: true
          |     },
          |     createdAt: {
          |       type: DataTypes.DATE
          |     },
          |     updatedAt: {
          |       type: DataTypes.DATE
          |     },
          |     attr1: DataTypes.STRING,
          |     attr2: DataTypes.INTEGER,
          |     attr3: {
          |       type: DataTypes.BOOLEAN,
          |       defaultValue: false,
          |       allowNull: false
          |     }
          |   },
          |   {
          |     engine: 'MYISAM', // default: 'InnoDB'
          |     charset: 'latin1' // default: null
          |   }
          | )

      h4#functions-droptable dropTable&lpar;tableName&rpar;
      p This method allows deletion of an existing table&period;
      pre.dark-blue
        code.javascript
          | migration.dropTable('nameOfTheExistingTable')

      h4#functions-dropalltables dropAllTables&lpar;&rpar;
      p This method allows deletion of all existing tables in the database&period;
      pre.dark-blue
        code.javascript
          | migration.dropAllTables()

      h4#functions-renametable renameTable&lpar;before&comma; after&rpar;
      p This method allows renaming of an existing table&period;
      pre.dark-blue
        code.javascript
          | migration.renameTable('Person', 'User')

      h4#functions-showalltables showAllTables&lpar;&rpar;
      p This method returns the name of all existing tables in the database&period;
      pre.dark-blue
        code.javascript
          | migration.showAllTables().success(function(tableNames) {})

      h4#functions-describetable describeTable&lpar;tableName&rpar;
      p
        | This method returns an array of hashes containing information about all attributes in the table&period;
      pre.dark-blue
        code.javascript
          | migration.describeTable('Person').success(function(attributes) {
          |   /*
          |     attributes will be something like:
          | &nbsp;
          |     {
          |       name: {
          |         type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!
          |         allowNull:    true,
          |         defaultValue: null
          |       },
          |       isBetaMember: {
          |         type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!
          |         allowNull:    false,
          |         defaultValue: false
          |       }
          |     }
          |   */
          | })

      h4#functions-addcolumn addColumn&lpar;tableName&comma; attributeName&comma; dataTypeOrOptions&rpar;
      p
        | This method allows adding columns to an existing table&period; The data type can be simple or complex&period;
      pre.dark-blue
        code.javascript
          | migration.addColumn(
          |   'nameOfAnExistingTable',
          |   'nameOfTheNewAttribute',
          |   DataTypes.STRING
          | )
          | &nbsp;
          | // or
          | &nbsp;
          | migration.addColumn(
          |   'nameOfAnExistingTable',
          |   'nameOfTheNewAttribute',
          |   {
          |     type: DataTypes.STRING,
          |     allowNull: false
          |   }
          | )

      h4#functions-removecolumn removeColumn&lpar;tableName&comma; attributeName&rpar;
      p This method allows deletion of a specific column of an existing table&period;
      pre.dark-blue
        code.javascript
          | migration.removeColumn('Person', 'signature')

      h4#functions-changecolumn changeColumn&lpar;tableName&comma; attributeName&comma; dataTypeOrOptions&rpar;
      p
        | This method changes the meta data of an attribute&period; It is possible to change the default value&comma; allowance of null or the data type&period; Please make sure&comma; that you are completely describing the new data type&period; Missing information are expected to be defaults&period;
      pre.dark-blue
        code.javascript
          | migration.changeColumn(
          |   'nameOfAnExistingTable',
          |   'nameOfAnExistingAttribute',
          |   DataTypes.STRING
          | )
          | &nbsp;
          | // or
          | &nbsp;
          | migration.changeColumn(
          |   'nameOfAnExistingTable',
          |   'nameOfAnExistingAttribute',
          |   {
          |     type: DataTypes.FLOAT,
          |     allowNull: false,
          |     default: 0.0
          |   }
          | )

      h4#functions-renamecolumn renameColumn&lpar;tableName&comma; attrNameBefore&comma; attrNameAfter&rpar;
      p This methods allows renaming attributes&period;
      pre.dark-blue
        code.javascript
          | migration.renameColumn('Person', 'signature', 'sig')

      h4#functions-addindex addIndex&lpar;tableName&comma; attributes&comma; options&rpar;
      p
        | This methods creates indexes for specific attributes of a table&period; The index name will be automatically generated if it is not passed via in the options &lpar;see below&rpar;&period;
      pre.dark-blue
        code.javascript
          | // This example will create the index person_firstname_lastname
          | migration.addIndex('Person', ['firstname', 'lastname'])

      pre.dark-blue
        code.javascript
          | // This example will create a unique index with the name SuperDuperIndex using the optional 'options' field.
          | // Possible options:
          | // - indicesType: UNIQUE|FULLTEXT|SPATIAL
          | // - indexName: The name of the index. Default is <tableName>_<attrName1>_<attrName2>
          | // - parser: For FULLTEXT columns set your parser
          | // - indexType: Set a type for the index, e.g. BTREE. See the documentation of the used dialect
          | migration.addIndex(
          |   'Person',
          |   ['firstname', 'lastname'],
          |   {
          |     indexName: 'SuperDuperIndex',
          |     indicesType: 'UNIQUE'
          |   }
          | )

      h4#functions-removeindex removeIndex&lpar;tableName&comma; indexNameOrAttributes&rpar;
      p This method deletes an existing index of a table&period;
      pre.dark-blue
        code.javascript
          | migration.removeIndex('Person', 'SuperDuperIndex')
          | &nbsp;
          | // or
          | &nbsp;
          | migration.removeIndex('Person', ['firstname', 'lastname'])


      h3#programmatic-use Programmatic use
      p
        | If you need to interact with the migrator within your code,
        | you can easily achieve that via <code>sequelize.getMigrator</code>.
        | You can specify the path to your migrations as well as a pattern
        | which represents the files that contain the migrations.
      pre.dark-blue
        code.javascript
          | var migrator = sequelize.getMigrator({
          |   path:        process.cwd() + '/database/migrations',
          |   filesFilter: /\.coffee$/
          | })
      p
        | Once you have a migrator object, you can run its migration
        | with <code>migrator.migrate</code>. By default, this will
        | execute all the up methods within your pending migrations.
        | If you want to rollback a migration, just call it like this:
      pre.dark-blue
        code.javascript
          | migrator
          |   .migrate({ method: 'down' })
          |   .success(function() {
          |     // The migrations have been executed!
          |   })

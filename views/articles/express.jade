extends ../layouts/with-sidebar

block documentation
  section
    div
      h2 Usage with Express.JS

      h3#introduction Introduction
      p
        | This article explains the usage of Sequelize with the MVC framework Express.JS.
        | You will learn a way to define models nicely and how to load them when you need them.

      h3#minimal-express-app A minimal express application
      p
        | In order to create a minimal express application, we need to install express first.
        | We can do this via the following commands:

      pre.dark-blue
        code.bash
          | mkdir example-app
          | cd example-app
          | npm install express
          | node_modules/.bin/express . -f
          | npm install
          | node app.js

      p
        | So now we have a default express application. If you point your browser
        | to <code>http://localhost:8080</code>, you will see a tiny page welcoming you.

      h3#adding-sequelize Adding Sequelize to the application
      p
        | The following commands will install <code>sequelize</code>,
        | the needed respective dialect binding. In this case for MySQL.
        |Â Furthermore we will create a folder <code>models</code>, that
        | will contain the model definitions.

      pre.dark-blue
        code.bash
          | npm install --save sequelize mysql
          | mkdir models

      h3#the-application A minimal todo app
      p
        | As an example application we will create a very basic and simple
        | todo application, which allows the creation of users and the
        | management of their tasks.

      h4#app-js app.js
      p
        | In order to create a maintainable application, we will put all the
        | database logic into the <code>models</code> folder. The application's
        | main file will then just sync the models with the database and run the
        |  server. This way we don't clutter the application.

      pre.dark-blue
        code.javascript
          | var express = require('express')
          |   , routes  = require('./routes')
          |   , user    = require('./models/user')
          |   , task    = require('./models/task')
          |   , http    = require('http')
          |   , path    = require('path')
          |   , db      = require('./models')
          | &nbsp;
          | var app = express()
          | &nbsp;
          | // all environments
          | app.set('port', process.env.PORT || 3000)
          | app.set('views', __dirname + '/views')
          | app.set('view engine', 'jade')
          | app.use(express.favicon())
          | app.use(express.logger('dev'))
          | app.use(express.json())
          | app.use(express.urlencoded())
          | app.use(express.methodOverride())
          | app.use(app.router)
          | app.use(express.static(path.join(__dirname, 'public')))
          | &nbsp;
          | // development only
          | if ('development' === app.get('env')) {
          |   app.use(express.errorHandler())
          | }
          | &nbsp;
          | app.get('/', routes.index)
          | app.post('/users/create', user.create)
          | app.post('/users/:user_id/tasks/create', task.create)
          | app.get('/users/:user_id/tasks/:task_id/destroy', task.destroy)
          | &nbsp;
          | db
          |   .sequelize
          |   .sync({ force: true })
          |   .complete(function(err) {
          |     if (err) {
          |       throw err[0]
          |     } else {
          |       http.createServer(app).listen(app.get('port'), function(){
          |         console.log('Express server listening on port ' + app.get('port'))
          |       })
          |     }
          |   })


      h4#models-index-js models/index.js
      p
        | The idea of this file is to configure a connection to the database and
        | to collect all model definitions. Once everything is in place, we will
        | call the method <code>associate</code> on each of the models. This method
        | will be used to associate the model with others.

      pre.dark-blue
        code.javascript
          | var fs        = require('fs')
          |   , path      = require('path')
          |   , Sequelize = require('sequelize')
          |   , lodash    = require('lodash')
          |   , sequelize = new Sequelize('sequelize_test', 'root', null)
          |   , db        = {}
          | &nbsp;
          | fs
          |   .readdirSync(__dirname)
          |   .filter(function(file) {
          |     return (file.indexOf('.') !== 0) && (file !== 'index.js')
          |   })
          |   .forEach(function(file) {
          |     var model = sequelize.import(path.join(__dirname, file))
          |     db[model.name] = model
          |   })
          | &nbsp;
          | Object.keys(db).forEach(function(modelName) {
          |   if ('associate' in db[modelName]) {
          |     db[modelName].associate(db)
          |   }
          | })
          | &nbsp;
          | module.exports = lodash.extend({
          |   sequelize: sequelize,
          |   Sequelize: Sequelize
          | }, db)


      h4#models-user-js models/user.js
      p
        | All models of our application are located
        | as separate files in the <code>models</code> folder. If you want to
        | add a new model, just add it to this folder and everything will work
        | automagically.

      p
        | <strong>Notice</strong> that the <code>associate</code> method
        | receives a parameter <code>models</code>, which contains everything
        | declared model within the models directory.

      pre.dark-blue
        code.javascript
          | module.exports = function(sequelize, DataTypes) {
          |   var User = sequelize.define('User', {
          |     username: DataTypes.STRING
          |   }, {
          |     classMethods: {
          |       associate: function(models) {
          |         User.hasMany(models.Task)
          |       }
          |     }
          |   })
          | &nbsp;
          |   return User
          | }

      h4#task-js models/task.js
      p
        | The other needed model is <code>Task</code>. It relates to the <code>User</code>.

      pre.dark-blue
        code.javascript
          | module.exports = function(sequelize, DataTypes) {
          |   var Task = sequelize.define('Task', {
          |     title: DataTypes.STRING
          |   }, {
          |     classMethods: {
          |       associate: function(models) {
          |         Task.belongsTo(models.User)
          |       }
          |     }
          |   })
          | &nbsp;
          |   return Task
          | }

      h4#routes-index routes/index.js
      p
        | The file <code>routes/index.js</code> contains the logic for a request against the main homepage.
        | It loads the models module and uses it to load all the users and tasks from the database.

      pre.dark-blue
        code.javascript
          | var db = require('../models')
          | &nbsp;
          | exports.index = function(req, res){
          |   db.User.findAll({
          |     include: [ db.Task ]
          |   }).success(function(users) {
          |     res.render('index', {
          |       title: 'Express',
          |       users: users
          |     })
          |   })
          | }

      p
        | This will allow us to iterate over the users in the view file.
        | We will skip the rest of the route files for this article.

      h4#view-index views/index.jade
      p
        | As we passed the users to the view and include the tasks for each user,
        | we can access the data in the view:

      pre.dark-blue
        code
          |extends layout
          |block content
          |  h1= title
          |  h2 Users
          |  ul
          |  each user in users
          |    li
          |      = user.username
          |      ul
          |        li
          |        each task in user.tasks
          |          li
          |            = task.title

      h3#whats-next What's next?
      p
        | This article shows a basic approach of how to integrate Sequelize
        | into an ExpressJS application. It allows the very easy management of
        | models by adding new files to a specific folder. Starting the application
        | will automatically sync the schema with the database.
      p
        | If you don't want to have automatic schema synchronization and instead want
        | migrations, just add a respective step to your deployment script.
      p
        | You can find the complete application code
        | <a href="https://github.com/sequelize/sequelize-expressjs-example" target="_blank" rel="nofollow">on Github</a>.
        | Feel free to add pull requests to it.
      p
        | Besides the use of Sequelize as model backend in your ExpressJS application,
        | you might also want to turn your server into a restful API. If that is the
        | case, check out <a href="https://github.com/sequelize/sequelize-restful" target="_blank" rel="nofollow">the repository on Github</a>.





